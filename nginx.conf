error_log stderr notice;
daemon off;

events { }

http {
  include /usr/local/openresty/nginx/conf/mime.types;

  server {
    listen 6789;
    lua_code_cache off;
    # lua_use_default_type off;

    #server_name flowz.imgapi.com;

    location @image_server {
        content_by_lua_file "serve_image.lua";
      }

      location ~ ^/images/(?<sig>[^/]+)/(?<size>[^/]+)/(?<path>.*\.(?<ext>[a-z_]*))$ {
      #location ~ ^/images?(?<sig>[^/]+)&(?<size>[^/]+)/(?<path>.*\.(?<ext>[a-z_]*))$ {

        root cache;
        set_md5 $digest "$size/$path";
        #try_files /$sig.$ext @image_server;
        try_files /$digest.$ext @image_server;

      }

    # This is a debug location that we can use to generate valid signed urls
     location ~ ^/gen/.*$ {
       content_by_lua_file "gen_url.lua";
     }

    location ~ /test{
       content_by_lua_file "test.lua";
       #content_by_lua_file "test1.lua";
    }

    location ~ /img-p{
       content_by_lua_file "img-process.lua";
    }

    location @image_server_test {
        content_by_lua_file "serve_image_test.lua";
    }

    location ~ /check/(?<path>.*\.(?<ext>[a-z_]*))$ {
      root cache;

      #set_md5 $digest "$size/$path";
      #try_files /$digest.$ext @image_server_test;

      try_files /$arg_image.$ext @image_server_test;
    }

    location @image_server_ {
        content_by_lua_file "img-process.lua";
    }

    location ~ /image-processing/(?<path>.*\.(?<ext>[a-z_]*))$ {
      root cache;
      try_files /$arg_image.$ext @image_server_;
    }

    location @image_server__ {
        content_by_lua_file "img-process.lua";
    }

    location ~ /img/(?<path>.*\.(?<ext>[a-z_]*))$ {
      root cache;
      try_files /$arg_image.$ext @image_server__;
    }

    location ~ /bash{
       content_by_lua_file "bash.lua";
    }

    location ~ /api{
       content_by_lua_file "api.lua";
    }

    location ~ /upload{
       content_by_lua_file "upload_server.lua";
    }

    location ~ /image-upload{
       content_by_lua_file "upload_image.lua";
    }

    location /save {
      content_by_lua_file upload.lua;
    }

    location ~ ^/users/(.+\.(?:gif|jpe?g|png))$ {
      root html/user-uploaded-images;
      try_files /$1 @not_found;
    }

    location ~ ^/products/(.+\.(?:gif|jpe?g|png))$ {
      root html/product-images;
      try_files /$1 @not_found;
    }

    location ~ ^/images/(.+\.(?:gif|jpe?g|png))$ {
      root cache;
      try_files /$1 @not_found;
    }

    location @not_found {
      content_by_lua '
          ngx.say("<p>Not found</p>")
      ';
    }

    location ~ /image-effect/(?<path>.*\.(?<ext>[a-z_]*))$ {
      root cache;
      try_files /$arg_image.$ext @image_effect;
    }

    location @image_effect {
        content_by_lua_file "image-effect.lua";
    }

    location ~ /image-api/(?<path>.*\.(?<ext>[a-z_]*))$ {
      root cache;
      try_files /$arg_image.$ext @image_api;
    }

    location @image_api {
      content_by_lua_file "image-api.lua";
    }

    location ~ /crop{
      content_by_lua_file "crop.lua";
    }
  }
}
